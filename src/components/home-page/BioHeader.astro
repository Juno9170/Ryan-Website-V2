---
import FallbackHeadshot from "../../assets/headshot_ryanzhu.jpg";
import ViewProjectsButton from "./ViewProjectsButton.astro";
import ContactMeButton from "./ContactMeButton.astro";
import BackgroundCircle from "../base-components/BackgroundCircle.astro";
import BackgroundGrid from "../base-components/BackgroundGrid.astro";

interface HeadshotSchema {
  alt?: string;
  avifUrl?: string;
  webpUrl?: string;
  jpgUrl?: string;
}

interface BiographySectionSchema {
  headshot: HeadshotSchema;
  biography: string;
}

interface DataSchema {
  data: {
    biographySection: BiographySectionSchema;
  };
}

const fetchData = async (): Promise<BiographySectionSchema> => {
  try {
    const response = await fetch("https://graphql.datocms.com/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
      },
      body: JSON.stringify({
        query: `
          query MyQuery {
            biographySection {
              headshot {
                alt
                avifUrl: url(imgixParams: {q: 80, fm: avif, w: 500, h: 800})
                webpUrl: url(imgixParams: {q: 80, fm: webp, w: 500, h: 800})
                jpgUrl: url(imgixParams:{q:75 , fm:jpg, w:500, h:800})
              }
              biography
            }
          }
        `,
      }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.status} ${response.statusText}`);
    }

    const json: DataSchema = await response.json();
    return json.data.biographySection;
  } catch (error) {
    console.error("Failed to fetch data:", error);
    return {
      headshot: {},
      biography: "",
    }; // Return default values or handle the error appropriately
  }
};

const data = await fetchData();
const { biography, headshot } = data;
const avifUrl = headshot.avifUrl || "";
const webpUrl = headshot.webpUrl || "";
const jpgUrl = headshot.jpgUrl || "";
const alt = headshot.alt || "headshot image";
---

<div
  class="min-h-screen px-10 xl:px-24 flex flex-col lg:flex-row relative xl:overflow-visible overflow-x-clip"
>
  <div class="flex-1 pt-20 md:pt-32 xl:pt-40 xxl:pt-52 xxxl:pt-80">
    <div
      class="text-3xl md:text-5xl xxl:text-6xl xxxl:text-8xl text-[#585A4E]"
      style={{ textShadow: "0px 5px 10px #00000040" }}
    >
      Hello, I'm <span class="font-AndersonBolder">Ryan Zhu,</span> a <span
        class="font-AndersonBolder">Computer Science Student</span
      >
    </div>
    <div
      class="text-sm md:text-xl lg:text-2xl xxxl:text-4xl font-AndersonLight pt-10 xl:pr-24 xxl:pr-40 xxl:pt-20"
    >
      {biography}
    </div>
    <div
      class="flex gap-6 md:gap-16 mb-6 xl:m-0 xxl:gap-32 justify-evenly xl:justify-start pt-5 xl:pr-24 xxl:pr-40 xxl:pt-12"
    >
      <div class="flex w-72 h-16 justify-center items-center">
        <ViewProjectsButton
          className=" h-8 md:h-10 lg:h-12 w-32 md:active:h-14 md:w-52 xl:hover:w-60 transition-all duration-200"
        />
      </div>
      <div class="flex w-72 h-16 justify-center items-center">
        <ContactMeButton
          className=" h-8 md:h-10 lg:h-12 md:active:h-14 w-32 md:w-52 xl:hover:w-60 transition-all duration-200"
        />
      </div>
    </div>
  </div>
  <div class="flex-1 flex justify-center items-center relative">
    <div class="absolute inset-0 -z-10">
      <div class="w-full h-full"></div>
    </div>
    <div
      class="w-1/2 lg:w-2/3 xxl:w-1/2 xl:h-auto flex justify-center items-center"
    >
      <div class="">
        <picture>
          <source srcset={avifUrl} type="image/avif" />
          <source srcset={webpUrl} type="image/webp" />
          <source srcset={jpgUrl} type="image/jpg" />
          <img
            src={FallbackHeadshot.src}
            alt={alt}
            loading="eager"
            decoding="async"
            class="rounded-2xl xl:rounded-[3rem] w-full"
          />
        </picture>
      </div>
    </div>
  </div>
  <div
    class="absolute -z-20 bottom-0 left-[20%] lg:left-1/3 xxl:left-[40%] transform translate-y-32 invisible md:visible md:scale-100 xl:scale-75 xxl:scale-100"
  >
    <BackgroundCircle
      size={800}
      startX={250}
      startY={250}
      gridOpacity={0.3}
      gridSize={100}
    />
  </div>
  <div
    class="absolute -z-20 top-0 left-0 transform -translate-x-1/3 -translate-y-1/3 scale-75 xxl:scale-100"
  >
    <BackgroundCircle
      size={800}
      startX={250}
      startY={250}
      gridOpacity={0.4}
      gridSize={100}
    />
  </div>
</div>
