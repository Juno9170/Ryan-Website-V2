---
import "../global.css";
import BackgroundCircle from "@/components/base-components/BackgroundCircle.astro";
import BackgroundGrid from "@/components/base-components/BackgroundGrid.astro";
import Layout from "../layouts/Layout.astro";
import ProjectCard from "@/components/experience/ProjectCard";
interface ImageSchema {
  alt?: string;
  avifUrl?: string;
  webpUrl?: string;
  jpgUrl?: string;
  fallbackUrl: string;
}

interface ProjectSchema {
  githubLink: string;
  projectLink: string;
  projectTitle: string;
  date: string;
  technologies: Array<string>;
  shortDescription: string;
  primaryImage: ImageSchema;
  slug: string;
}

interface DataSchema {
  data: {
    allProjects: Array<ProjectSchema>;
  };
}

const fetchData = async (): Promise<ProjectSchema[]> => {
  try {
    const response = await fetch("https://graphql.datocms.com/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
      },
      body: JSON.stringify({
        query: `
          query MyQuery {
            allProjects(orderBy: date_ASC) {
    					githubLink
    					projectLink
              projectTitle
              date
              technologies
              shortDescription
              slug
              primaryImage {
                alt
                avifUrl: url(imgixParams: {q: 50, fm: avif, w: 800})
                webpUrl: url(imgixParams: {q: 65, fm: webp, w: 800})
                jpgUrl: url(imgixParams: {q: 80, fm: jpg, w: 800})
                fallbackUrl: url
              }
            }
          }
        `,
      }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.status} ${response.statusText}`);
    }

    const json: DataSchema = await response.json();
    return json.data.allProjects;
  } catch (error) {
    console.error("Failed to fetch data:", error);
    return []; // Return an empty array or handle the error appropriately
  }
};

const projects = await fetchData();
---

<Layout title="All of my experiences!" noBg>
  <div
    class="flex justify-center items-center lg:justify-normal lg:items-start pt-24 lg:pt-32 lg:px-32 text-5xl xl:text-6xl xxl:text-7xl font-AndersonBolder"
  >
    Projectsâš¡
  </div>
  <div
    class="absolute inset-0 -z-50 h-full w-full bg-[linear-gradient(to_right,#80808030_2px,transparent_2px),linear-gradient(to_bottom,#80808030_2px,transparent_2px)] bg-[size:120px_120px]"
  >
  </div>
  <div class="pt-5 md:pt-12 lg:pt-20">
    <div class="flex flex-col gap-10 px-2 md:px-10 lg:px-20">
      {
        projects.map((project, index) => {
          return (
            <ProjectCard
              projectTitle={project.projectTitle}
              date={project.date}
              primaryImage={project.primaryImage}
              projectLink={project.projectLink}
              shortDescription={project.shortDescription}
              slug={project.slug}
              technologies={project.technologies}
            />
          );
        })
      }
    </div>
  </div>
</Layout>

<style></style>
