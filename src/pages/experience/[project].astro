---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout.astro";
import Details from "./Details.astro";
import type { Lectern } from "lucide-react";
interface SlugsSchema {
  data: {
    allProjects: Array<SlugSchema>;
  };
}

interface SlugSchema {
  slug: string;
}



interface ProjectSchema{
    projectTitle: string;
    slug: string;
    startDate: string;
    technologies: Array<string>;
    projectLink: string;
    longDescription: string;
    primaryImage: ImageSchema;
    gallery: Array<ImageSchema>;
}
interface ProjectsSchema{
    data:{
        allProjects: Array<ProjectSchema>;
    }
}
interface ImageSchema{
    alt: string;
    avifUrl: string;
    webpUrl: string;
    jpgUrl: string;
    fallbackUrl: string;
}

export const getStaticPaths: GetStaticPaths = async () => {
  try {
    const response = await fetch("https://graphql.datocms.com/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
      },
      body: JSON.stringify({
        query: `
          query MyQuery {
              allProjects {
                  slug
              }
          }
        `,
      }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.status} ${response.statusText}`);
    }

    const json: SlugsSchema = await response.json();
    console.log(JSON.stringify(json))
    return json.data.allProjects.map((project) => ({
        params: { project: project.slug },
    }));
  } catch (error) {
    console.error("Failed to fetch data:", error);
    return [];
  }  
};

const { project } = Astro.params;

const fetchData = async (): Promise<ProjectSchema | null> => {
  try {
    let viewportWidth = 1920;
    if (typeof window !== "undefined") {
      viewportWidth = window.innerWidth;
    }
    
    const response = await fetch("https://graphql.datocms.com/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,
      },
      body: JSON.stringify({
        query: `
          query MyQuery($slug: String!, $width: FloatType) {
            allProjects(filter: {slug: {eq: $slug}}) {
              projectTitle
              slug
              startDate
              technologies
              projectLink
              longDescription
              primaryImage {
                alt
                avifUrl: url(imgixParams: {q: 75, fm: avif, w: $width})
                webpUrl: url(imgixParams: {q: 75, fm: webp, w: $width})
                jpgUrl: url(imgixParams: {q: 75, fm: jpg, w: $width})
                fallbackUrl: url
              }
              gallery {
                alt
                avifUrl: url(imgixParams: {q: 50, fm: avif, w: 800})
                webpUrl: url(imgixParams: {q: 65, fm: webp, w: 800})
                jpgUrl: url(imgixParams: {q: 80, fm: jpg, w: 800})
                fallbackUrl: url
              }
            }
          }
        `,
        variables: { slug: project, width: viewportWidth },
      }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.status} ${response.statusText}`);
    }

    const data: ProjectsSchema = await response.json();
    return data.data.allProjects[0];
  } catch (error) {
    console.error("Failed to fetch data:", error);
    return null;
  }
};

const data = await fetchData();
console.log(data);
---
<Layout title={data?.projectTitle || "Project" } noBg={true}>
  <div>
    <Details project={data} />
  </div>
</Layout>
